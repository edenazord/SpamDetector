# 🚀 GitHub Actions - Spam Detector Android
# Compilazione automatica di APK Debug e Release con artifacts scaricabili

name: 📱 Build Android APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  # 🔨 Build APK Debug - Automatico per ogni push
  build-debug:
    name: 🐛 Build Debug APK
    runs-on: ubuntu-latest
    if: github.event_name != 'release'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: 🔧 Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 🏃‍♂️ Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: 🧹 Clean project
      run: ./gradlew clean
      
    - name: 🔨 Build Debug APK
      run: ./gradlew assembleDebug --stacktrace
      
    - name: 📤 Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: SpamDetector-Debug-${{ github.sha }}
        path: app/build/outputs/apk/debug/app-debug.apk
        retention-days: 7
        
    - name: 📊 Upload build reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-reports-debug
        path: |
          app/build/reports
          app/build/test-results
        retention-days: 7

  # 🚀 Build APK Release - Solo per release e tag
  build-release:
    name: 🎯 Build Release APK
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: 🔧 Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 🏃‍♂️ Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: 🔑 Create keystore from secrets
      if: ${{ secrets.KEYSTORE_BASE64 != '' }}
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/keystore.jks
        
    - name: 🧹 Clean project
      run: ./gradlew clean
      
    - name: 🚀 Build Release APK
      run: ./gradlew assembleRelease --stacktrace
      env:
        KEYSTORE_FILE: keystore.jks
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        
    - name: 📤 Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: SpamDetector-Release-${{ github.ref_name }}
        path: app/build/outputs/apk/release/app-release.apk
        retention-days: 30
        
    - name: 🎉 Upload to GitHub Release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: app/build/outputs/apk/release/app-release.apk
        asset_name: SpamDetector-${{ github.ref_name }}.apk
        asset_content_type: application/vnd.android.package-archive

  # 🧪 Test unitari
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: 🔧 Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 🏃‍♂️ Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: 🧪 Run unit tests
      run: ./gradlew test --stacktrace
      
    - name: 📊 Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          app/build/test-results/test**/TEST-*.xml

  # 📦 Build APK per ogni branch (latest)
  build-latest:
    name: 📦 Build Latest APK
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build-debug, test]
    
    steps:
    - name: 📥 Download Debug APK
      uses: actions/download-artifact@v4
      with:
        name: SpamDetector-Debug-${{ github.sha }}
        path: ./
        
    - name: 🏷️ Rename APK
      run: mv app-debug.apk SpamDetector-Latest.apk
      
    - name: 📤 Upload Latest APK
      uses: actions/upload-artifact@v4
      with:
        name: SpamDetector-Latest
        path: SpamDetector-Latest.apk
        retention-days: 30